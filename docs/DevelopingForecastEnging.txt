üß† How to Use the Real Database Data in Forecast Engine

In the actual forecast engine (whether composable or API), you would:

    Calculate Forecast Line

        Pull RecurringTransactions

        For each:

            Use frequency to generate projected future payments

            Adjust with category, amount, next_due_date

            Sum per day or per month depending on view

    Calculate Actual Line

        Use AccountHistory for account balances over time

        Use Transaction to calculate historical cash flow

        Group by day/month to match forecast

    Overlay User Adjustments

        Pull from manualIncome and liabilityRate in UI

        Apply to forecast as modifiers

    Compute Net Delta

        Forecast - Actual at each date ‚Üí delta line
# üìä Forecast Graph Specification

## üîÅ 1. Forecast Generation Logic

### Data Sources:

* Historical Transactions from Plaid
* Investment Performance from linked accounts
* Account Balances (for current net worth)
* User-entered manual income, expenses, and liabilities

### Forecast Model:

* Recurring income/expenses are projected forward based on user input or historical data patterns
* Investment returns factored in (e.g., monthly rate or compound yield)
* Liabilities (e.g., rent, debt payments) included per recurrence
* Forecasts extend to the end of the current view (month or year)
* Manual adjustments added via `ForecastAdjustmentsForm.vue`
* View toggle (Month/Year) modifies recurrence projection length and breakdowns

## ‚úÖ 2. Actuals Calculation

### Based On:

* Calculated from Plaid-linked account balances
* Represents net worth up to current date
* Driven by real-time or recently synced balance data
* Includes all transaction history and investment fluctuations

### Chart Behavior:

* Actuals line appears alongside Forecast
* Actuals only render up to today‚Äôs date (not future)
* Reflects sum of all known and realized financial positions

## üóì 3. Static Date Range with Toggle

### View Modes:

* **Month View**

  * X-axis: Start of current month ‚Üí End of current month
  * Granularity: daily or weekly
* **Year View**

  * X-axis: Jan 1st ‚Üí Dec 31st of current year
  * Granularity: monthly

### Toggle Behavior:

* A button toggles between Month and Year
* View toggle affects:

  * X-axis range and label granularity
  * Forecast and Actuals datasets
  * Breakdown totals
  * Recurring forecast depreciation logic

## üî¢ 4. Recurring Entry Handling (Deprecation Logic)

### Monthly Recurring:

* E.g., \$10/month

  * Month View: Pro-rated based on days left
  * Year View: \$10 \* number of months left in year

### Annual Recurring:

* E.g., \$120/year starting in June

  * Year View: Deprecate \$120 across remaining months (e.g., \$20/month)
  * Month View (June): Show relevant pro-rated portion if applicable

### Breakdown Totals:

* Totals dynamically update to reflect current view mode
* All manual or recurring items are deconstructed across the remaining time period

## üìà 5. Chart Rendering Features

* Two data series: Forecasted vs Actual
* Uses real calendar dates as x-axis (Month or Year scope)
* Forecast line continues through the full date range
* Actual line ends at today
* Tooltip on hover shows line values
* Toggle button visible in chart header
* Breakdown components update accordingly

---

## üß± Engine/Chart Logic Scaffold (Initial Plan)

### Composable Module: `useForecastEngine.ts`

* Exports:

  * `getForecastData(viewType, forecastItems, manualIncome, liabilityRate)` ‚Üí \[{ date, value }]
  * `getActualsData(viewType)` ‚Üí \[{ date, value }]
* Internally:

  * Determines static date range based on view
  * Applies recurrence logic to distribute forecast items
  * Sums account balances (mock or API) to get actuals

### Component: `ForecastChart.vue`

* Imports from `useForecastEngine`
* Props:

  * `forecastItems`, `manualIncome`, `liabilityRate`, `viewType`
* Emits: `update:viewType`
* State:

  * `forecastData`, `actualsData`
* Watcher triggers data rebuild on prop change
* Chart.js used for rendering lines
* Toggle button for switching view

### Data Structures

```ts
interface ForecastPoint {
  date: string // 'YYYY-MM-DD'
  value: number
}
```

### Dependencies

* dayjs (for date logic)
* chart.js / vue-chartjs (for rendering)

### Next Steps

* Implement `useForecastEngine.ts`
* Convert chart to show actual lines
* Add legend + tooltip
* Connect breakdown to computed forecast totals
