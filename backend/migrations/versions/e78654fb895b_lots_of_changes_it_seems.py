"""Lots of changes it seems

Revision ID: e78654fb895b
Revises: 768e5d55d4c4
Create Date: 2025-07-05 00:59:08.845537

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "e78654fb895b"
down_revision = "8d3f3e3e8e8d"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    insp = sa.inspect(bind)

    plaid_indexes = {idx["name"] for idx in insp.get_indexes("plaid_accounts")}
    plaid_fks = {fk["name"] for fk in insp.get_foreign_keys("plaid_accounts")}

    with op.batch_alter_table("plaid_accounts", schema=None) as batch_op:
        if batch_op.f("ix_plaid_accounts_institution_db_id") in plaid_indexes:
            batch_op.drop_index(batch_op.f("ix_plaid_accounts_institution_db_id"))
        if "fk_plaid_accounts_institution_db_id" not in plaid_fks:
            batch_op.create_foreign_key(
                "fk_plaid_accounts_institution_db_id",
                "institutions",
                ["institution_db_id"],
                ["id"],
            )

    recurring_fks = {
        fk["name"] for fk in insp.get_foreign_keys("recurring_transactions")
    }
    with op.batch_alter_table("recurring_transactions", schema=None) as batch_op:
        if "fk_recurring_transactions_account_id" not in recurring_fks:
            batch_op.create_foreign_key(
                "fk_recurring_transactions_account_id",
                "accounts",
                ["account_id"],
                ["account_id"],
            )

    teller_indexes = {idx["name"] for idx in insp.get_indexes("teller_accounts")}
    teller_fks = {fk["name"] for fk in insp.get_foreign_keys("teller_accounts")}
    teller_columns = {col["name"] for col in insp.get_columns("teller_accounts")}

    with op.batch_alter_table("teller_accounts", schema=None) as batch_op:
        if batch_op.f("ix_teller_accounts_institution_db_id") in teller_indexes:
            batch_op.drop_index(batch_op.f("ix_teller_accounts_institution_db_id"))
        if "fk_teller_accounts_institution_db_id" not in teller_fks:
            batch_op.create_foreign_key(
                "fk_teller_accounts_institution_db_id",
                "institutions",
                ["institution_db_id"],
                ["id"],
            )
        if "institution_id" in teller_columns:
            batch_op.drop_column("institution_id")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("teller_accounts", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("institution_id", sa.VARCHAR(length=128), nullable=True)
        )
        batch_op.drop_constraint(
            "fk_teller_accounts_institution_db_id", type_="foreignkey"
        )
        batch_op.create_index(
            batch_op.f("ix_teller_accounts_institution_db_id"),
            ["institution_db_id"],
            unique=False,
        )

    with op.batch_alter_table("recurring_transactions", schema=None) as batch_op:
        batch_op.drop_constraint(
            "fk_recurring_transactions_account_id", type_="foreignkey"
        )

    with op.batch_alter_table("plaid_accounts", schema=None) as batch_op:
        batch_op.drop_constraint(
            "fk_plaid_accounts_institution_db_id", type_="foreignkey"
        )
        batch_op.create_index(
            batch_op.f("ix_plaid_accounts_institution_db_id"),
            ["institution_db_id"],
            unique=False,
        )

    # ### end Alembic commands ###
