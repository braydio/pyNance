"""Added columns

Revision ID: 768e5d55d4c4
Revises: 
Create Date: 2025-06-24 14:54:35.855869

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '768e5d55d4c4'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Clean up any stale Alembic temp tables to avoid SQLite OperationalError
    for tmp_table in (
        '_alembic_tmp_accounts',
        '_alembic_tmp_plaid_accounts',
        '_alembic_tmp_recurring_transactions',
        '_alembic_tmp_teller_accounts',
    ):
        op.execute(f"DROP TABLE IF EXISTS {tmp_table}")
    # Drop existing index to avoid conflicts (SQLite may retain old index)
    try:
        op.drop_index('ix_accounts_institution_db_id', table_name='accounts')
    except Exception:
        pass
    with op.batch_alter_table('accounts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('institution_db_id', sa.Integer(), nullable=True))
        batch_op.create_index(batch_op.f('ix_accounts_institution_db_id'), ['institution_db_id'], unique=False)
        batch_op.create_foreign_key(
            batch_op.f('fk_accounts_institution_db_id_institutions'),
            'institutions', ['institution_db_id'], ['id']
        )

    # Determine if SQLite (skip complex table rebuilds and FKs for SQLite)
    bind = op.get_bind()
    is_sqlite = bind.dialect.name == 'sqlite'

    # PLAID_ACCOUNTS: add two columns, FK only for non-SQLite
    if not is_sqlite:
        with op.batch_alter_table('plaid_accounts', schema=None) as batch_op:
            batch_op.add_column(sa.Column('plaid_institution_id', sa.String(length=128), nullable=True))
            batch_op.add_column(sa.Column('institution_db_id', sa.Integer(), nullable=True))
            batch_op.create_foreign_key(
                batch_op.f('fk_plaid_accounts_institution_db_id_institutions'),
                'institutions', ['institution_db_id'], ['id']
            )
    else:
        # Add columns only if they do not already exist (SQLite alters lack IF NOT EXISTS)
        conn = op.get_bind()
        insp = sa.inspect(conn)
        existing = {col['name'] for col in insp.get_columns('plaid_accounts')}
        if 'plaid_institution_id' not in existing:
            op.add_column('plaid_accounts', sa.Column('plaid_institution_id', sa.String(length=128), nullable=True))
        if 'institution_db_id' not in existing:
            op.add_column('plaid_accounts', sa.Column('institution_db_id', sa.Integer(), nullable=True))

    # RECURRING_TRANSACTIONS: add FK only for non-SQLite
    if not is_sqlite:
        with op.batch_alter_table('recurring_transactions', schema=None) as batch_op:
            batch_op.create_foreign_key(
                batch_op.f('fk_recurring_transactions_account_id_accounts'),
                'accounts', ['account_id'], ['account_id']
            )

    # TELLER_ACCOUNTS: add/drop columns and FK only for non-SQLite; simple adds for SQLite
    if not is_sqlite:
        with op.batch_alter_table('teller_accounts', schema=None) as batch_op:
            batch_op.add_column(sa.Column('teller_institution_id', sa.String(length=128), nullable=True))
            batch_op.add_column(sa.Column('institution_db_id', sa.Integer(), nullable=True))
            batch_op.create_foreign_key(
                batch_op.f('fk_teller_accounts_institution_db_id_institutions'),
                'institutions', ['institution_db_id'], ['id']
            )
            batch_op.drop_column('institution_id')
    else:
        # Add columns only if not present
        conn = op.get_bind()
        insp = sa.inspect(conn)
        existing_t = {col['name'] for col in insp.get_columns('teller_accounts')}
        if 'teller_institution_id' not in existing_t:
            op.add_column('teller_accounts', sa.Column('teller_institution_id', sa.String(length=128), nullable=True))
        if 'institution_db_id' not in existing_t:
            op.add_column('teller_accounts', sa.Column('institution_db_id', sa.Integer(), nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('teller_accounts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('institution_id', sa.VARCHAR(length=128), nullable=True))
        batch_op.drop_constraint(
            batch_op.f('fk_teller_accounts_institution_db_id_institutions'), type_='foreignkey'
        )
        batch_op.drop_column('institution_db_id')
        batch_op.drop_column('teller_institution_id')

    with op.batch_alter_table('recurring_transactions', schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f('fk_recurring_transactions_account_id_accounts'), type_='foreignkey'
        )

    with op.batch_alter_table('plaid_accounts', schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f('fk_plaid_accounts_institution_db_id_institutions'), type_='foreignkey'
        )
        batch_op.drop_column('institution_db_id')
        batch_op.drop_column('plaid_institution_id')

    with op.batch_alter_table('accounts', schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f('fk_accounts_institution_db_id_institutions'), type_='foreignkey'
        )
        batch_op.drop_index(batch_op.f('ix_accounts_institution_db_id'))
        batch_op.drop_column('institution_db_id')

    # ### end Alembic commands ###
