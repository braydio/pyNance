from flask import Blueprint, jsonify, request

from app.extensions import db
import app.services.forecast_orchestrator as forecast_orchestrator

forecast = Blueprint("forecast", __name__)


@forecast.route("", methods=["GET"])
def get_forecast():
    """Return forecast payload generated by :class:`ForecastOrchestrator`."""
    try:
        view_type = request.args.get("view_type", "Month")  # noqa: F841
        manual_income = float(request.args.get("manual_income", 0))
        liability_rate = float(request.args.get("liability_rate", 0))

        orchestrator = ForecastOrchestrator(db.session)
        projections = orchestrator.forecast(days=horizon)

        daily_totals = defaultdict(float)
        for p in projections:
            day = (
                p["date"].strftime("%Y-%m-%d")
                if hasattr(p["date"], "strftime")
                else str(p["date"])
            )
            daily_totals[day] += p.get("balance", 0)

        labels = []
        forecast_line = []
        start = datetime.utcnow().date()
        for i in range(horizon):
            day = start + timedelta(days=i)
            labels.append(day.strftime("%b %d"))
            forecast_line.append(
                round(daily_totals.get(day.strftime("%Y-%m-%d"), 0), 2)
            )

        adjustment = manual_income - liability_rate
        if adjustment:
            forecast_line = [round(f + adjustment, 2) for f in forecast_line]

        actuals_map = defaultdict(float)  # noqa: F841
        history_rows = (  # noqa: F841
            db.session.query(AccountHistory)
            .filter(AccountHistory.date >= start)
            .filter(AccountHistory.date <= start + timedelta(days=horizon - 1))
            .all()
        )
        return jsonify(payload), 200
    except Exception as e:  # pragma: no cover - defensive
        return jsonify({"error": str(e)}), 500
